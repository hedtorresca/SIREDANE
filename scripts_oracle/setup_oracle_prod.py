#!/usr/bin/env python3
"""
Script para configurar la estructura de base de datos Oracle en producción
Verifica la conexión y crea las tablas necesarias en el esquema RRAA_STAGING
"""

import cx_Oracle
import os
import sys
from pathlib import Path
from dotenv import load_dotenv

# Agregar el directorio raíz al path
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

def load_prod_config():
    """Carga la configuración de producción"""
    env_file = project_root / "config" / "prod.oracle.env"
    load_dotenv(env_file)
    
    return {
        "host": "10.168.48.79",
        "port": 1522,
        "service_name": "dbkactus",
        "user": "RRAA_DWH",
        "password": "D4n3.rR3E*202S"
    }

def test_connection(config):
    """Prueba la conexión a Oracle"""
    try:
        dsn = cx_Oracle.makedsn(config["host"], config["port"], service_name=config["service_name"])
        connection = cx_Oracle.connect(config["user"], config["password"], dsn)
        print(f"✅ Conexión exitosa a Oracle: {config['host']}:{config['port']}/{config['service_name']}")
        print(f"✅ Usuario: {config['user']}")
        return connection
    except Exception as e:
        print(f"❌ Error de conexión: {e}")
        return None

def check_schema_exists(connection, schema_name):
    """Verifica si el esquema existe"""
    try:
        cursor = connection.cursor()
        cursor.execute("""
            SELECT COUNT(*) 
            FROM all_users 
            WHERE username = UPPER(:schema_name)
        """, schema_name=schema_name)
        
        count = cursor.fetchone()[0]
        cursor.close()
        
        if count > 0:
            print(f"✅ Esquema {schema_name} existe")
            return True
        else:
            print(f"❌ Esquema {schema_name} no existe")
            return False
    except Exception as e:
        print(f"❌ Error verificando esquema: {e}")
        return False

def check_table_exists(connection, schema_name, table_name):
    """Verifica si una tabla existe en el esquema"""
    try:
        cursor = connection.cursor()
        cursor.execute("""
            SELECT COUNT(*) 
            FROM all_tables 
            WHERE owner = UPPER(:schema_name) AND table_name = UPPER(:table_name)
        """, schema_name=schema_name, table_name=table_name)
        
        count = cursor.fetchone()[0]
        cursor.close()
        
        return count > 0
    except Exception as e:
        print(f"❌ Error verificando tabla {table_name}: {e}")
        return False

def create_control_table(connection, schema_name):
    """Crea la tabla de control de IDs generados"""
    try:
        cursor = connection.cursor()
        
        # Cambiar al esquema correcto
        cursor.execute(f"ALTER SESSION SET CURRENT_SCHEMA = {schema_name}")
        
        # Crear la tabla de control
        cursor.execute("""
            CREATE TABLE control_ids_generados (
                id                        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                id_estadistico            VARCHAR2(100) UNIQUE,
                tipo_entidad              VARCHAR2(2) CHECK (tipo_entidad IN ('01', '02')),
                tipo_documento            VARCHAR2(50),
                numero_documento          VARCHAR2(50),
                fecha_generacion          TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                estado                    VARCHAR2(20) DEFAULT 'generado' CHECK (estado IN ('generado', 'utilizado', 'error')),
                observaciones             CLOB,
                load_datetime             TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # Crear índices
        cursor.execute("CREATE INDEX idx_control_ids_tipo_entidad ON control_ids_generados(tipo_entidad)")
        cursor.execute("CREATE INDEX idx_control_ids_documento ON control_ids_generados(tipo_documento, numero_documento)")
        cursor.execute("CREATE INDEX idx_control_ids_fecha ON control_ids_generados(fecha_generacion)")
        cursor.execute("CREATE INDEX idx_control_ids_estado ON control_ids_generados(estado)")
        
        # Agregar comentarios
        cursor.execute("COMMENT ON TABLE control_ids_generados IS 'Tabla de control para IDs estadísticos generados por la API'")
        cursor.execute("COMMENT ON COLUMN control_ids_generados.id_estadistico IS 'ID estadístico generado (01+consecutivo para personas, 02+consecutivo para empresas)'")
        cursor.execute("COMMENT ON COLUMN control_ids_generados.tipo_entidad IS 'Tipo de entidad: 01=Persona, 02=Empresa'")
        cursor.execute("COMMENT ON COLUMN control_ids_generados.estado IS 'Estado del ID: generado, utilizado, error'")
        
        connection.commit()
        cursor.close()
        print(f"✅ Tabla control_ids_generados creada en esquema {schema_name}")
        return True
        
    except Exception as e:
        print(f"❌ Error creando tabla control_ids_generados: {e}")
        return False

def create_raw_obt_empresas_table(connection, schema_name):
    """Crea la tabla raw_obt_empresas"""
    try:
        cursor = connection.cursor()
        
        # Cambiar al esquema correcto
        cursor.execute(f"ALTER SESSION SET CURRENT_SCHEMA = {schema_name}")
        
        # Crear la tabla
        cursor.execute("""
            CREATE TABLE raw_obt_empresas (
                id_estadistico                    VARCHAR2(100),
                razon_social                      VARCHAR2(250),
                tipo_documento                    VARCHAR2(50),
                numero_documento                  VARCHAR2(50),
                digito_verificacion               VARCHAR2(10),
                codigo_camara                     VARCHAR2(50),
                camara_comercio                   VARCHAR2(100),
                matricula                         VARCHAR2(50),
                fecha_matricula                   DATE,
                fecha_renovacion                  DATE,
                ultimo_ano_renovado               NUMBER,
                fecha_vigencia                    DATE,
                fecha_cancelacion                 DATE,
                codigo_tipo_sociedad              VARCHAR2(50),
                tipo_sociedad                     VARCHAR2(100),
                codigo_organizacion_juridica      VARCHAR2(50),
                organizacion_juridica             VARCHAR2(100),
                codigo_estado_matricula           VARCHAR2(50),
                estado_matricula                  VARCHAR2(100),
                representante_legal               VARCHAR2(200),
                num_identificacion_representante_legal VARCHAR2(50),
                clase_identificacion_rl           VARCHAR2(50),
                fecha_actualizacion               TIMESTAMP,
                load_date                         TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # Crear índices
        cursor.execute("CREATE INDEX idx_raw_obt_empresas_id ON raw_obt_empresas(id_estadistico)")
        cursor.execute("CREATE INDEX idx_raw_obt_empresas_doc ON raw_obt_empresas(tipo_documento, numero_documento)")
        
        connection.commit()
        cursor.close()
        print(f"✅ Tabla raw_obt_empresas creada en esquema {schema_name}")
        return True
        
    except Exception as e:
        print(f"❌ Error creando tabla raw_obt_empresas: {e}")
        return False

def create_raw_obt_personas_table(connection, schema_name):
    """Crea la tabla raw_obt_personas"""
    try:
        cursor = connection.cursor()
        
        # Cambiar al esquema correcto
        cursor.execute(f"ALTER SESSION SET CURRENT_SCHEMA = {schema_name}")
        
        # Crear la tabla
        cursor.execute("""
            CREATE TABLE raw_obt_personas (
                id_estadistico                    VARCHAR2(100),
                tipo_documento                    VARCHAR2(50),
                numero_documento                  VARCHAR2(50),
                primer_nombre                     VARCHAR2(100),
                segundo_nombre                    VARCHAR2(100),
                primer_apellido                   VARCHAR2(100),
                segundo_apellido                  VARCHAR2(100),
                fecha_nacimiento                  DATE,
                sexo_an                           VARCHAR2(10),
                codigo_municipio_nacimiento       NUMBER,
                codigo_pais_nacimiento            NUMBER,
                load_date                         TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # Crear índices
        cursor.execute("CREATE INDEX idx_raw_obt_personas_id ON raw_obt_personas(id_estadistico)")
        cursor.execute("CREATE INDEX idx_raw_obt_personas_doc ON raw_obt_personas(tipo_documento, numero_documento)")
        
        connection.commit()
        cursor.close()
        print(f"✅ Tabla raw_obt_personas creada en esquema {schema_name}")
        return True
        
    except Exception as e:
        print(f"❌ Error creando tabla raw_obt_personas: {e}")
        return False

def grant_permissions(connection, schema_name):
    """Otorga permisos necesarios al esquema"""
    try:
        cursor = connection.cursor()
        
        # Otorgar permisos básicos
        cursor.execute(f"GRANT SELECT, INSERT, UPDATE, DELETE ON {schema_name}.control_ids_generados TO PUBLIC")
        cursor.execute(f"GRANT SELECT, INSERT, UPDATE, DELETE ON {schema_name}.raw_obt_empresas TO PUBLIC")
        cursor.execute(f"GRANT SELECT, INSERT, UPDATE, DELETE ON {schema_name}.raw_obt_personas TO PUBLIC")
        
        connection.commit()
        cursor.close()
        print(f"✅ Permisos otorgados para esquema {schema_name}")
        return True
        
    except Exception as e:
        print(f"⚠️  Advertencia al otorgar permisos: {e}")
        return False

def main():
    """Función principal"""
    print("🚀 Iniciando configuración de Oracle en producción...")
    print("=" * 60)
    
    # Cargar configuración
    config = load_prod_config()
    
    # Probar conexión
    connection = test_connection(config)
    if not connection:
        print("❌ No se pudo establecer conexión. Terminando.")
        return False
    
    schema_name = "RRAA_DWH"
    
    # Verificar esquema
    if not check_schema_exists(connection, schema_name):
        print(f"❌ El esquema {schema_name} no existe. Contacta al administrador de la base de datos.")
        connection.close()
        return False
    
    print(f"\n📋 Verificando tablas en esquema {schema_name}...")
    
    # Verificar y crear tabla control_ids_generados
    if not check_table_exists(connection, schema_name, "control_ids_generados"):
        print("📝 Creando tabla control_ids_generados...")
        if not create_control_table(connection, schema_name):
            connection.close()
            return False
    else:
        print("✅ Tabla control_ids_generados ya existe")
    
    # Verificar y crear tabla raw_obt_empresas
    if not check_table_exists(connection, schema_name, "raw_obt_empresas"):
        print("📝 Creando tabla raw_obt_empresas...")
        if not create_raw_obt_empresas_table(connection, schema_name):
            connection.close()
            return False
    else:
        print("✅ Tabla raw_obt_empresas ya existe")
    
    # Verificar y crear tabla raw_obt_personas
    if not check_table_exists(connection, schema_name, "raw_obt_personas"):
        print("📝 Creando tabla raw_obt_personas...")
        if not create_raw_obt_personas_table(connection, schema_name):
            connection.close()
            return False
    else:
        print("✅ Tabla raw_obt_personas ya existe")
    
    # Otorgar permisos
    print("\n🔐 Configurando permisos...")
    grant_permissions(connection, schema_name)
    
    connection.close()
    
    print("\n" + "=" * 60)
    print("✅ Configuración completada exitosamente!")
    print(f"✅ Esquema: {schema_name}")
    print(f"✅ Host: {config['host']}:{config['port']}")
    print(f"✅ Service: {config['service_name']}")
    print("\n📋 Tablas creadas/verificadas:")
    print("   - control_ids_generados")
    print("   - raw_obt_empresas")
    print("   - raw_obt_personas")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
